@using manageRegistersApp.Models
@using manageRegistersApp.Services
@using DataLibrary
@inject IDataAccess _data
@inject IConfiguration _config
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject ClientService clientService



<MudAppBar Color="Color.Primary" Fixed="false" Class="d-block m-0 text-center">
    Create Client
</MudAppBar>

<MudDialog>
    <DialogContent>
        <MudTextField @bind-Value="clientName" Label="Client Name" Variant="Variant.Outlined" Required></MudTextField>
        <MudTextField @bind-Value="clientContact" Label="Contact" Variant="Variant.Outlined"></MudTextField>
        <MudTextField @bind-Value="clientLocation" Label="Location" Variant="Variant.Outlined"></MudTextField>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancelar</MudButton>
        <MudButton Color="Color.Primary" OnClick="Save">Save</MudButton>
    </DialogActions>
</MudDialog>


@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }


    public string clientName { get; set; } = null!;
    public string? clientContact { get; set; }
    public string? clientLocation { get; set; }


    void Cancel() => MudDialog.Cancel();

    public async Task Save()
    {
        bool CreationSuccess = await AddClient();

        Snackbar.Add(CreationSuccess ? "Cliente creado con exito" : "Error al crear el cliente", CreationSuccess ? Severity.Success : Severity.Error);

        DialogResult.Ok(CreationSuccess);

        MudDialog.Close();
    }

    public async Task<bool> AddClient()
    {

        Client client = new Client
            {
                name = clientName,
                creation_date = DateTime.Now,
                contact = clientContact,
                location = clientLocation
            };

        return await clientService.CreateClient(client);

    }

}
