@using manageRegistersApp.Models
@using manageRegistersApp.Data
@using System.Net.Http.Json
@using System.Security.Claims
@using DataLibrary
@inject IDataAccess _data
@inject IConfiguration _config
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@page "/admin/users"
@attribute [Authorize(Roles = "Administrator")]

<h3>Users</h3>


@if (users == null)
{
    <p><em>Loading...</em></p>
    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
}
else
{
    <MudFab @onclick="@(()=>AddUser())" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" IconSize="Size.Small" />
    <br />
    <MudTable Elevation="25" Items="@users" Filter="new Func<User,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Users</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search for Users..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<User, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<User, object>(x=>x.Password)">Password</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<User, object>(x=>x.Email)">Email</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<User, object>(x=>x.Role)">Role</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<User, object>(x=>x.User_State)">Estado</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Password">@context.Password</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd DataLabel="Role">@context.Role</MudTd>
            <MudTd DataLabel="Estado">
                <MudToggleIconButton ToggledChanged="args => ToggleChanged(context.Id, args)"
                                     Icon="@Icons.Material.Filled.Circle" Color="@Color.Error" Title="Inactivo" Size="Size.Medium"
                                     ToggledIcon="@Icons.Material.Filled.Circle" ToggledColor="@Color.Success" ToggledTitle="Activo" ToggledSize="Size.Medium"
                                     Toggled="@context.User_State" />
            </MudTd>
            <MudTd DataLabel="">
                <MudFab @onclick="@(()=>EditUser(@context.Id))" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
                <MudFab @onclick="@(()=>DeleteUser(@context.Id))" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    List<User>? users;
    private string? searchString;

    private User selectedItem1 = null;
    private HashSet<User> selectedItems = new HashSet<User>();
    private IEnumerable<User> Elements = new List<User>();


    //Load inital Data
    protected override async Task OnInitializedAsync()
    {
        users = await LoadUsers();
    }

    #region FILTERS METHODS

    private bool FilterFunc1(User element) => FilterFunc(element, searchString);

    private bool FilterFunc(User element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Role.ToString().Contains(searchString))
            return true;

        if (searchString == "Activo" || searchString == "activo")
        {
            searchString = true.ToString();
        }
        else if (searchString == "Inactivo" || searchString == "inactivo")
        {
            searchString = false.ToString();
        }

        if (element.User_State.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    #endregion

    #region CRUD METHODS

    public void AddUser()
    {
        NavManager.NavigateTo("/admin/users/newuser");
    }

    //edit user
    public async Task EditUser(int id)
    {

        User? userFind = users.FirstOrDefault(obj => obj.Id == id); //busca el usuario mediante el id

        User UserEdited = await OpenDialogEditer(userFind); //abre una caja para editar el usuario y retorna el nuevo usuario editado

        if (UserEdited != null && UserEdited.Id == userFind.Id) //Comprueba si se edito el usuario
        {
            string Name = UserEdited.Name;
            string Password = UserEdited.Password;
            string Email = UserEdited.Email;
            string Role = UserEdited.Role;

            bool updateSuccessful = await EditUserQuery(id, Name, Password, Email, Role);
            if (updateSuccessful)
            {
                Snackbar.Add("Usuario Editado Correctamente", Severity.Success);
            }
            else
            {
                Snackbar.Add("Error al Editar el Usuario", Severity.Error);
            }

        }

        else
        {
            Snackbar.Add("Edicion Cancelada", Severity.Info);
        }
        StateHasChanged();
    }

    //delete user (NO IMPLIMENTAR)
    public void DeleteUser(int id)
    {

    }
    #endregion

    #region METHODS TO QUERY DATABASES

    //obtener lista de usuarios
    private async Task<List<User>> LoadUsers()
    {
        string sql = "select * from users";
        return await _data.LoadData<User, dynamic>(sql, new { }, _config.GetConnectionString("default"));
    }

    //query para actualizar estado del usuario
    public async Task<bool> UserStatusQuery(int _id, bool _User_State)
    {
        try
        {
            string sql = "UPDATE `testdb`.`users` SET `User_State` = @User_State WHERE(`id` = @id)";
            int rowsAffected = await _data.SaveData(sql, new { id = _id, User_State = _User_State }, _config.GetConnectionString("default"));

            return rowsAffected > 0;     // Devuelve true si se actualizó al menos una fila
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al actualizar el estado del usuario: {ex.Message}");
            return false;
        }
    }


    //query para editar los usuario
    public async Task<bool> EditUserQuery(int _id, string _Name, string _Password, string _Email, string _Role)
    {
        try
        {
            string sql = "UPDATE `testdb`.`users` SET `Name` = @Name, `Password` = @Password, `Email` = @Email, `Role` = @Role WHERE (`id` = @id);";
            int rowsAffected = await _data.SaveData(sql, new { Name = @_Name, Password = @_Password, Email = @_Email, Role = @_Role, id = @_id }, _config.GetConnectionString("default"));
            return rowsAffected > 0;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al actualizar el estado del usuario: {ex.Message}");
            return false;
        }
    }

    #endregion

    #region SPECIAL METHODS

    //ventana emergente para editar usuario
    public async Task<User> OpenDialogEditer(User editUser)
    {
        var parameters = new DialogParameters();
        parameters.Add("userEdit", editUser); //pasa el usuario a editar como parametro para el dialog

        var dialog = await DialogService.ShowAsync<DialogUser>("Edit User", parameters);
        var result = await dialog.Result;



        if (!result.Canceled)
        {
            User? user = result.Data as User; //datos del usuario ya editado
            return user;
        }

        else
        {
            return null;
        }
    }

    //metodo para actualizar el estado del usuario
    public async void ToggleChanged(int id, bool toggled)
    {

        // Actualizar el estado del usuario en la base de datos
        bool updateSuccessful = await UserStatusQuery(id, toggled);

        // Actualizar el estado del usuario en la lista si la actualización en la base de datos fue exitosa
        if (updateSuccessful)
        {
            User? user = users.FirstOrDefault(u => u.Id == id);
            if (user != null)
            {
                user.User_State = toggled;
                Snackbar.Add("el estado del usuario fue cambiado Exitosamente", Severity.Success);
            }
        }
        else
        {
            Snackbar.Add("Error al cambiar el estado del usuario", Severity.Error);
        }
        StateHasChanged();
    }

    #endregion

}

