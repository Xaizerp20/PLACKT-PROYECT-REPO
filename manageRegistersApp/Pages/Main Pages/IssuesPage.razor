@using manageRegistersApp.Models
@using manageRegistersApp.Data
@using manageRegistersApp.Services
@using System.Net.Http.Json
@using DataLibrary
@using System.ComponentModel.DataAnnotations
@using HtmlAgilityPack
@using System.Net.Mail;
@using System.Net;
@using System.Security.Claims;
@inject NavigationManager NavManager
@inject IDataAccess _data
@inject IConfiguration _config
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject IWebHostEnvironment HostingEnvironment
@inject IDialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ArrivalsService arrivalsService
@inject ClientService clientService
@inject IssueService issueService
@inject CommonUtilities utilities
@inject EmailsService emailService

@page "/{clientName}/issues"
@attribute [Authorize(Roles = "Administrator, Manager")];

<h3> Issues</h3>

<MudPaper Elevation="25" Square=true>
    <MudToolBar>
        <MudTooltip Text="Add" Placement="Placement.Top">
            <MudFab @onclick=OpenDialogAddRegister Color="Color.Primary" Icon="@Icons.Material.Filled.Add" Size="Size.Small" IconSize="Size.Small" />
        </MudTooltip>
        <MudTooltip Text="Send Report" Placement="Placement.Top">
            <MudButton Class="mx-5" Disabled="@_processing" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Info" OnClick="async ()=> {await SendEmailsEvent(listIssues);}" Size="Size.Small" Style="min-width: 135px">
                @if (_processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Send Report</MudText>
                }
            </MudButton>
        </MudTooltip>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search for Registers..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Immediate=true></MudTextField>
        <MudIconButton Icon="@Icons.Material.Filled.DateRange" Color="Color.Surface" Size="Size.Medium" OnClick="DatePickerOpen" Title="Date Filter" />
    </MudToolBar>
</MudPaper>



<MudDateRangePicker PickerVariant="PickerVariant.Dialog" @bind-DateRange="_dateRange" PickerOpened="ResetLists" Style="display:none" @ref=DatePicker>
    <PickerActions>
        <MudButton Class="mr-auto align-self-start" OnClick="@(() => DatePicker.Clear())">Clear</MudButton>
        <MudButton OnClick="@(() => DatePicker.Close(false))">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="@(() => {DatePicker.Close(); getDateRange(); OnchangeDate();})">Ok</MudButton>

    </PickerActions>
</MudDateRangePicker>


<MudTabs Elevation="25">



    @if (listIssues == null)
    {
        <p><em>Loading...</em></p>
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    }
    else
    {
        <MudTabPanel Icon="@Icons.Material.Filled.AccessTime" Text="PENDING" BadgeData=@IssuesPending BadgeColor="Color.Error">


            <MudTable @ref="_table" Elevation="25" Items="@listIssues" Filter="new Func<Issue,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1" @bind-SelectOnRowClick="@_selectOnRowClick" Breakpoint="Breakpoint.None" HorizontalScrollbar=true>



                <ToolBarContent>
                    <MudText Typo="Typo.h6">Issues</MudText>
                    <MudSpacer />

                    <MudChipSet AllClosable="true" OnClose="Closed">
                        @foreach (var value in values)
                        {
                            <MudChip Text="@value" Label="true">

                            </MudChip>
                        }
                    </MudChipSet>

                </ToolBarContent>

                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="new Func<Issue, object>(x=>x.NumberPlate)">Vehicle Plate</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<Issue, object>(x=>x.Issue_Type)">Type Issue</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<Issue, object>(x=>x.Open_Date)">Open Date</MudTableSortLabel></MudTh>
                    <MudTh>Description</MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<Issue, object>(x=>x.Name)">Registrado Por</MudTableSortLabel></MudTh>
                    <MudTh>Resolve</MudTh>
                </HeaderContent>
                <RowTemplate>
                    @if (context.Status == "PENDING")
                    {
                        <MudTd DataLabel="Vehicle Plate">@context.NumberPlate</MudTd>
                        <MudTd DataLabel="Type Issue">@context.Issue_Type</MudTd>
                        <MudTd DataLabel="Open Date">@context.Open_Date</MudTd>
                        <MudTd DataLabel="Description">@context.Description</MudTd>
                        <MudTd DataLabel="Registrado Por">@context.Name</MudTd>
                        <MudTd DataLabel="Resolve">
                            <div @ref="myDivToggle" id="IdToggle">
                                @if (isLoading)
                                {
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="sr-only">Loading...</span>
                                    </div>
                                }
                                else
                                {
                                    <MudToggleIconButton Icon="@Icons.Material.Filled.AccessTime" Color="@Color.Error" Title="Off" Size="Size.Large"
                                                         ToggledIcon="@Icons.Material.Filled.CheckCircle" ToggledColor="@Color.Success" ToggledTitle="On"
                                                         ToggledChanged="args => ResolveIssue(args, context.id)" Toggled=false>
                                    </MudToggleIconButton>
                                }

                            </div>
                        </MudTd>
                    }
                </RowTemplate>
            </MudTable>


        </MudTabPanel>
        <MudTabPanel Icon="@Icons.Material.Filled.CheckCircle" Text="SOLVED" BadgeData=@IssuesResolved BadgeColor="Color.Success">
            <MudTable @ref="_table" Elevation="25" Items="@listIssues" Filter="new Func<Issue,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1" @bind-SelectOnRowClick="@_selectOnRowClick" Breakpoint="Breakpoint.None" HorizontalScrollbar=true>
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Issues</MudText>
                    <MudSpacer />
                </ToolBarContent>


                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="new Func<Issue, object>(x=>x.NumberPlate)">Vehicle Plate</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<Issue, object>(x=>x.Issue_Type)">Type Issue</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<Issue, object>(x=>x.Open_Date)">Open Date</MudTableSortLabel></MudTh>
                    <MudTh>Description</MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<Issue, object>(x=>x.Resolve_Date)">Resolve_Date</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<Issue, object>(x=>x.client_DNI)">client_DNI</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<Issue, object>(x=>x.Name)">Registrado Por</MudTableSortLabel></MudTh>
                    <MudTh>Resolved</MudTh>
                </HeaderContent>
                <RowTemplate>
                    @if (context.Status == "RESOLVED")
                    {
                        <MudTd DataLabel="Vehicle Plate">@context.NumberPlate</MudTd>
                        <MudTd DataLabel="Type Issue">@context.Issue_Type</MudTd>
                        <MudTd DataLabel="Open Date">@context.Open_Date</MudTd>
                        <MudTd DataLabel="Description">@context.Description</MudTd>
                        <MudTd DataLabel="Resolve_Date">@context.Resolve_Date</MudTd>
                        <MudTd DataLabel="client_DNI">@context.client_DNI</MudTd>
                        <MudTd DataLabel="Registrado Por">@context.Name</MudTd>
                        <MudTd DataLabel="Resolved">
                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Large" />
                        </MudTd>
                    
                    }
                </RowTemplate>
            </MudTable>
        </MudTabPanel>
    }
</MudTabs>

<style>
    .mud-input-control > .mud-input-control-input-container {
        align-items: flex-end;
        text-align: center;
        margin-right: 5px;
    }
</style>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    [Parameter]
    public string? clientName { get; set; }

    private string searchString;
    private List<Issue>? listIssues; //lista de resultados del query de ingresos
    private bool resolveIssue;
    private bool _selectOnRowClick = true;
    private string _selectedItemText = "No row clicked";
    private MudTable<Issue> _table;
    public bool AlarmOn { get; set; }

    private Issue selectedItem1 = null;
    private HashSet<Issue> selectedItems = new HashSet<Issue>();
    private IEnumerable<Issue> Elements = new List<Issue>();
    private int IssuesPending;
    private int IssuesResolved;

    private bool isToggled = false;
    private bool isLoading = false;
    private bool _processing = false;
    private ElementReference myDivToggle;

    private MudDateRangePicker DatePicker;
    private DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);
    int i = 1;
    List<string> values = new List<string>();
    string toDate = null!;
    string fromDate = null!;


    //metodo de inicio
    protected override async Task OnInitializedAsync()
    {

        clientName = (await authenticationState).User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.GroupSid)?.Value; //obtiene el nombre del cliente del usuario

        await utilities.IsUrlChangeAllowed(clientName); //comprueba el acceso a los datos

        listIssues = await issueService.GetIssuesAsync(clientName);
        IssuesPending = listIssues.Where(i => i.Status == "PENDING").Count();
        IssuesResolved = listIssues.Where(i => i.Status == "RESOLVED").Count();
    }




    #region FILTERS AND TABLE METHODS
    private bool FilterFunc1(Issue element) => FilterFunc(element, searchString);

    private bool FilterFunc(Issue element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Issue_Type.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.NumberPlate.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Open_Date.ToString().Contains(searchString))
            return true;
        return false;
    }

    public void sOnRowClick(TableRowClickEventArgs<Issue> args)
    {
        _selectedItemText = $"({args.Item.id}) {args.Item.Issue_Type}";
    }
    #endregion

    #region CRUD METHODS

    //redirect to form page for add new issues
    public void AddIssue()
    {
        NavManager.NavigateTo("/issues/newissue");
    }

    //metodo para resolver los Issues
    private async void ResolveIssue(bool toggledValue, int id)
    {

        var divId = myDivToggle.Id;
        isToggled = toggledValue;


        if (toggledValue)
        {

            // El toggle está activado
            isLoading = true;

            bool updateSuccessful = await issueService.ResolveIssue(id); //resuelve el issues mediante el id

            Snackbar.Add(updateSuccessful ? "Issue resuelto Correctamente" : "Error al resolver el issue", updateSuccessful ? Severity.Success : Severity.Error);

            await ReloadData();
            isLoading = false;
            StateHasChanged();


        }

    }

    //ventana emergente para crear los ingresos
    public async Task<Issue> OpenDialogAddRegister()
    {
        var parameters = new DialogParameters();
        parameters.Add("OriginPage", "Manager");

        var options = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true, NoHeader = true };
        var dialog = await DialogService.ShowAsync<DialogCreateIssue>("", parameters, options);
        var result = await dialog.Result;


        if (!result.Canceled)
        {
            Issue? issue = result.Data as Issue; //datos del usuario ya creado
            await refreshPage();
            return issue;
        }

        else
        {
            return null;
        }


    }


    public async Task SendEmailsEvent(List<Issue> listIssues)
    {
        _processing = true;

        string reportsFolderPath = Path.Combine(HostingEnvironment.WebRootPath, "Reports/report_issues_hotel.html"); //Ruta del html

        // Dirección de correo electrónico del remitente
        string remitente = "placa4@manicatoerp.com";

        Client client = await clientService.GetClientIdByName(clientName);
        List<Email> emails = (await emailService.GetEmailsByIdAsync(client.id));   //busqueda de los emails por id del cliente


        await GenerateHtmlIssues(listIssues); //genera el html


        //envia por cada email
        emails.ForEach(async destinatario =>
            {
                try
                {
                    await utilities.SendEmail(remitente, destinatario.email, destinatario.email_name, reportsFolderPath);
                    _processing = false;
                    Snackbar.Add("Reporte enviado Correctamente", Severity.Success);
                    Console.WriteLine("Reporte enviado Correctamente");
                    
                }

                catch (Exception)
                {
                    _processing = false;
                    Snackbar.Add("Error al enviar el report", Severity.Error);
                    Console.WriteLine("Error al enviar el report");
                    return;
                }
            });

    }


    public async Task GenerateHtmlIssues(List<Issue> listIssues)
    {
        _processing = true;

        string reportsFolderPath = Path.Combine(HostingEnvironment.WebRootPath, "Reports/report_issues_hotel.html"); //Ruta del html

        HtmlDocument reportHtml = new HtmlDocument();
        reportHtml.Load(reportsFolderPath); //carga los datos del html

        string newRowHtmlPending = "";
        string newRowHtmlResolve = "";

        foreach (var a in listIssues)
        {
            if (a.Status == "PENDING")
            {
                newRowHtmlPending += $"<tr><td>{a.NumberPlate}</td><td>{a.Issue_Type}</td><td>{a.Open_Date}</td><td>{a.Description}</td></tr>";
            }
            else
            {
                newRowHtmlResolve += $"<tr><td>{a.NumberPlate}</td><td>{a.Issue_Type}</td><td>{a.Open_Date}</td><td>{a.Description}</td><td>{a.Resolve_Date}</td></tr>";
            }




        }

        AddRow(reportHtml, newRowHtmlPending, newRowHtmlResolve, 1);
        string htmlGenerated = reportHtml.DocumentNode.OuterHtml; //genera el html completo

        using (StreamWriter file = new StreamWriter(reportsFolderPath))
        {
            try
            {
                await file.WriteLineAsync(htmlGenerated);
            }
            catch(Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }

        }

    }

    public void AddRow(HtmlDocument html, string DataRowPending, string DataRowResolve, int repeat)
    {
        HtmlNode tableBodyPending = html.DocumentNode.SelectSingleNode("//table[@id='pending']/tbody");
        HtmlNode tableBodyResolve = html.DocumentNode.SelectSingleNode("//table[@id='resolve']/tbody");

        tableBodyPending.InnerHtml = string.Empty; //limpia la tabla
        tableBodyResolve.InnerHtml = string.Empty; //limpia la tabl

        // Verificar si se encontró el elemento
        if (tableBodyPending != null && tableBodyResolve != null)
        {

            tableBodyPending.InnerHtml = DataRowPending;
            tableBodyResolve.InnerHtml = DataRowResolve;
        }

        else
        {
            // El elemento no se encontró
            Console.WriteLine("El elemento no se encontró.");
        }

    }

    public void getDateRange()
    {

        List<string> dateListString = new List<string> { };

        dateListString.Clear();

        foreach (DateTime date in EachDay(_dateRange.Start.Value, _dateRange.End.Value))
        {
            Console.WriteLine(date.ToString("yyyy-MM-dd"));
            dateListString.Add(date.ToShortDateString());
        }

        List<Issue> objetosFiltrados = listIssues.Where(objeto => dateListString.Contains(objeto.Open_Date.ToShortDateString())).ToList();

        foreach (var ar in objetosFiltrados)
        {
            Console.WriteLine($"fecha: {ar.Open_Date.ToShortDateString()}, matricula: {ar.NumberPlate}");
        }

        listIssues = objetosFiltrados;

    }

    public void DatePickerOpen()
    {

        DatePicker.Open();
        values.Clear();
    }

    public void OnchangeDate()
    {
        fromDate = _dateRange.Start.Value.ToShortDateString();
        toDate = _dateRange.End.Value.ToShortDateString();
        Add();
    }

    public async Task ResetLists()
    {
        listIssues = await issueService.GetIssuesAsync(clientName);
        StateHasChanged();
    }

    // Función auxiliar para generar todas las fechas dentro de un rango
    public static IEnumerable<DateTime> EachDay(DateTime startDate, DateTime endDate)
    {
        for (var day = startDate.Date; day <= endDate.Date; day = day.AddDays(1))
            yield return day;
    }

    private async Task ReloadData()
    {
        listIssues = await issueService.GetIssuesAsync(clientName);
        IssuesPending = listIssues.Where(i => i.Status == "PENDING").Count();
        IssuesResolved = listIssues.Where(i => i.Status == "RESOLVED").Count();
        StateHasChanged();
    }

    public async Task refreshPage()
    {
        listIssues = await issueService.GetIssuesAsync(clientName);

    }

    public void Add()
    {
        values.Add($"From {fromDate} to {toDate}");
    }

    public async Task Closed(MudChip chip)
    {
        values.Remove(chip.Text);
        await ResetLists();
    }
    #endregion

}
