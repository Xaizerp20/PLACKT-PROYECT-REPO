@using manageRegistersApp.Models
@using manageRegistersApp.Data
@using manageRegistersApp.Services
@using System.Net.Http.Json
@using Newtonsoft.Json
@using DataLibrary
@inject NavigationManager uriHelper;
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject IDataAccess _data
@inject IConfiguration _config
@inject IDialogService DialogService

@inject VehicleService vehicleService
@inject ArrivalsService arrivalsService
@inject IssueService issueService

@page "/{clientName}/vehicles"
@attribute [Authorize(Roles = "Administrator")]


<h3>Vehicles</h3>


@if (vehicles == null)
{
    <p><em>Loading...</em></p>
    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
}
else
{
    <MudTable Elevation="25" Items="@vehicles">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Vehicles</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search for Vehicles..." e="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Number Plate</MudTh>
            <MudTh>Pending Issues</MudTh>
            <MudTh>Resolved Issues</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Number Plate">@context.NumberPlate</MudTd>
            <MudTd DataLabel="Pending Issues">@context.Pending_Issues</MudTd>
            <MudTd DataLabel="Issues">@context.Resolved_Issues</MudTd>
            <MudTd DataLabel="">
                <AuthorizeView Roles="Administrator" Context="xd">
                    <Authorized>
                        <MudFab @onclick="@(()=>EditVehicle(@context.id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
                        <MudFab @onclick="@(()=>DeleteVehicle(@context.id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
                    </Authorized>
                </AuthorizeView>
            </MudTd>

        </RowTemplate>
    </MudTable>
}



@code {

    [Parameter]
    public string? clientName { get; set; }

    private IEnumerable<string> selectedVehicle = null!; //vehiculo seleccionado
    private string Issue = null!; //issue ingresado

    List<Vehicle>? vehicles;
    private string? searchString;
    private List<Vehicle> foundVehicle = new List<Vehicle>();
    private List<Issue> listIssues = new List<Issue>();
    private int IssuesPending;
    private int IssuesResolved;

    //Load inital Data
    protected override async Task OnInitializedAsync()
    {
        vehicles = await vehicleService.GetVehiclesAsync();

        foreach (var v in vehicles)
        {
            listIssues = await issueService.GetIssuesByVehicleId(v.id);

            v.Pending_Issues = listIssues.Where(i => i.Status == "PENDING").Count();
            v.Resolved_Issues = listIssues.Where(i => i.Status == "RESOLVED").Count();
        }

    }

    //ventana emergente para editar los vehiculos
    public async Task<Vehicle> OpenDialogEditer(Vehicle editVehicle)
    {
        var parameters = new DialogParameters();
        parameters.Add("vehicleEdit", editVehicle); //pasa el usuario a editar como parametro para el dialog

        var dialog = await DialogService.ShowAsync<DialogVehicle>("Edit Vehicle", parameters);
        var result = await dialog.Result;



        if (!result.Canceled)
        {
            Vehicle? vehicle = result.Data as Vehicle; //datos del usuario ya editado
            return vehicle;
        }

        else
        {
            return null;
        }
    }

    #region METHODS CRUD


    public void AddVehicle() { }

    public async Task EditVehicle(int id)
    {

        Vehicle? vehicleFind = vehicles.FirstOrDefault(obj => obj.id == id); //busca el usuario mediante el id

        Vehicle vehicleEdited = await OpenDialogEditer(vehicleFind); //abre una caja para editar el usuario y retorna el nuevo usuario editado

        if (vehicleEdited != null && vehicleEdited.id == vehicleFind.id) //Comprueba si se edito el usuario
        {
            string NumberPlate = vehicleEdited.NumberPlate;

            bool updateSuccessful = await EditVehicleQuery(id, NumberPlate);
            if (updateSuccessful)
            {
                Snackbar.Add("Vehiculo Editado Correctamente", Severity.Success);
            }
            else
            {
                Snackbar.Add("Error al Editar el Vehiculo", Severity.Error);
            }

        }

        else
        {
            Snackbar.Add("Edicion Cancelada", Severity.Info);
        }
        StateHasChanged();
    }

    public void DeleteVehicle(int id)
    {

    }

    #endregion

    #region METHODS QUERY

   
    //query para editar los usuario
    public async Task<bool> EditVehicleQuery(int _id, string _NumberPlate)
    {
        try
        {
            string sql = "UPDATE `testdb`.`vehicles` SET `NumberPlate` = @NumberPlate WHERE (`id` = @id);";
            int rowsAffected = await _data.SaveData(sql, new { NumberPlate = @_NumberPlate, id = @_id }, _config.GetConnectionString("default"));
            return rowsAffected > 0;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al actualizar el Vehiculo: {ex.Message}");
            return false;
        }
    }

    #endregion


}
