@using DataLibrary;
@using System.ComponentModel.DataAnnotations;
@using manageRegistersApp.Models
@using manageRegistersApp.Data
@using manageRegistersApp.Services
@inject NavigationManager NavManager
@inject IDataAccess _data
@inject IConfiguration _config
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject IEventService EventService
@inject IGlobalService Global

@page "/issues/newissue"




<h3>Add Issue</h3>


<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" md="6" Class="d-flex align-center justify-center mud-width-full py-8">
            <MudCard>
                <MudCardContent>
                    <MudAutocomplete T="string" Label="Number Plate" @bind-Value="model.NumberPlate" SearchFunc="@SearchSavedVehicles"
                                     ResetValueOnEmptyText="true"
                                     CoerceText="true"
                                     AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary"
                                          Required
                                     HelperText="Max. 8 characters"
                                     For="@(() => model.NumberPlate)" />


                    <MudSelect T="string" Label="Type" AnchorOrigin="Origin.BottomCenter" @bind-Value=model.TypeIssue For="@(() => model.TypeIssue)" Required>
                        @foreach (var r in listIssueType)
                        {
                            <MudSelectItem Value="@(r)" />
                        }
                    </MudSelect>

                    <MudTextField T="string" Label="Description" Placeholder="Description" Variant="Variant.Outlined" Lines="3" @bind-Value="model.DescriptionIssue" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" FullWidth="true" Class="ml-auto" Disabled=@success>
                        @if (success)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Processing</MudText>
                        }
                        else
                        {
                            <MudText>Save</MudText>
                        }
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" md="12">
            <MudText Class="mb-n3" Typo="Typo.body2">
                <MudChip>@(model.NumberPlate ?? "Not selected")</MudChip><MudChip>@(model.TypeIssue ?? "Not selected")</MudChip> <MudChip>@(model.DescriptionIssue ?? "Not Writer")</MudChip>
                </MudText>
            </MudItem>
            <MudItem xs="12" sm="5">
                <MudPaper Class="pa-4 mud-height-full">
                    <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                    @if (success)
                {
                    <MudText Color="Color.Success">Success</MudText>
                }
                else
                {
                    <MudText Color="@Color.Error">
                        <ValidationSummary />
                    </MudText>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</EditForm>



@code {
    #region FORM DATA
    RegisterAccountForm model = new RegisterAccountForm();
    bool success;
    List<Vehicle> Listvehicles = new List<Vehicle>();

    private Dictionary<string, int> vehicleOptions = new Dictionary<string, int>();
    string sampleText = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.";


    private string[] listIssueType =
      {
        "Robo",
        "Perdida",
        "Daños",
        "Otros"
    };


    public class RegisterAccountForm
    {
        [Required]
        [StringLength(8, ErrorMessage = "Plate length can't be more than 8.")]
        [RegularExpression("^[A-Z][A-Z0-9]*$", ErrorMessage = "First letter must be uppercase, followed by uppercase letters or numbers.")]
        public string NumberPlate { get; set; } = null!;

        [Required]
        public string TypeIssue { get; set; } = null!;

        [StringLength(50, ErrorMessage = "Description length can't be more than 50.")]
        public string? DescriptionIssue { get; set; } = null;

    }

    private async Task OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
        await RegisterIssue();
        await Task.Delay(2000);
        ReloadPage();
    }


    //method to list vehicles saved
    private async Task<IEnumerable<string>> SearchSavedVehicles(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.

        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
        {
            return vehicleOptions.Keys;// Si el valor es nulo o vacío, devuelve una lista vacía
        }

        return vehicleOptions.Keys.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    #endregion


    protected override async Task OnInitializedAsync()
    {
        Listvehicles = await LoadVehicles();


    }

    //query para cargar la lista de vehiculos //usada
    private async Task<List<Vehicle>> LoadVehicles()
    {

        List<Vehicle> Listvehicles = new List<Vehicle>();

        string sql = "select * from vehicles";
        Listvehicles = await _data.LoadData<Vehicle, dynamic>(sql, new { }, _config.GetConnectionString("default"));

        foreach (var v in Listvehicles)
        {
            if (!vehicleOptions.ContainsKey(v.NumberPlate))
            {
                vehicleOptions.Add(v.NumberPlate, v.id);
            }
            else
            {
                continue;
            }
        }

        return Listvehicles;
    }

    //query busca los vehiculos mediante la placa //usada
    public async Task<List<Vehicle>> SearchVehicleByNumber(string _NumberPlate)
    {
        string sql = "SELECT * FROM vehicles WHERE NumberPlate = @NumberPlate;";
        return  await _data.LoadData<Vehicle, dynamic>(sql, new { NumberPlate = @_NumberPlate }, _config.GetConnectionString("default"));
    }


    private async Task RegisterIssue()
    {
        List<Vehicle> searchVeh = await SearchVehicleByNumber(model.NumberPlate);
        Vehicle? foundVeh = searchVeh.FirstOrDefault(obj => obj.NumberPlate == model.NumberPlate);

        if (searchVeh.Count != 0 || foundVeh != null || foundVeh.NumberPlate == model.NumberPlate)
        {
            await AddNewIssue(model.TypeIssue, model.DescriptionIssue, vehicleOptions[model.NumberPlate]);
            await HandleNewEvent($"Se agrego un nuevo Issue al vehiculo: {model.NumberPlate}"); //envia el evento a la linea de tiempo
        }
        else
        {

            Console.WriteLine("Error");
            return;

        }
    }

    //query agregar nuevo issue
    public async Task AddNewIssue(string _Issue_Type, string _Issues_Description, int _id_vehicle)
    {
        string sql = "INSERT INTO issues (Issue_Type, Description, vehicle_Id) VALUES (@Issue_Name, @Description, @vehicle_Id);";
        await _data.SaveData(sql, new { Issue_Name = _Issue_Type, Description = _Issues_Description, vehicle_Id = _id_vehicle }, _config.GetConnectionString("default"));
    }



    private async Task HandleNewEvent(string msg)
    {
        Snackbar.Add("New Event", Severity.Success);

        await Task.Delay(2000);

        EventService.NotifyEvent(msg);
    }

    private void ReloadPage()
    {
        NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
    }


}
