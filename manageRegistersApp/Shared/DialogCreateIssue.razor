@using DataLibrary;
@using System.ComponentModel.DataAnnotations;
@using manageRegistersApp.Models
@using manageRegistersApp.Data
@using manageRegistersApp.Services
@using System.Security.Claims;
@inject NavigationManager NavManager
@inject IDataAccess _data
@inject IConfiguration _config
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject IEventService EventService
@inject IssueService issueService
@inject ClientService clientService




<MudAppBar Color="Color.Primary" Fixed="false" Class="d-block m-0 text-center">
    Register Issue
</MudAppBar>

<MudDialog>
    <DialogContent>
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />

            @if(OriginPage == "Manager"){
                <MudTextField Label="Numero de Placa" @bind-Value=@model.NumberPlate Variant="Variant.Outlined"></MudTextField>
            }
            else
            {
                <MudField Label="Numero de Placa" Variant="Variant.Outlined">@model.NumberPlate</MudField>
            }

           
            <MudSelect T="string" Label="Habitacion" AnchorOrigin="Origin.BottomCenter" @bind-Value=model.TypeIssue For="@(() => model.TypeIssue)" Required>
                @foreach (var r in listIssueType)
                {
                    <MudSelectItem Value="@(r)" />
                }
            </MudSelect>
            <MudTextField T="string"  Placeholder="Description" Variant="Variant.Outlined" Lines="3" @bind-Value="model.DescriptionIssue" Class="mt-5"/>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" FullWidth="true" Class="ml-auto mt-3" Disabled=@success>
                @if (success)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Save</MudText>
                }
            </MudButton>
        </EditForm>
    </DialogContent>
</MudDialog>



@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    AuthenticationState? authState;

    [Parameter]
    public string userId { get; set; } //Id del usuario

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter]
    public string _NumberPlate { get; set; } //parametro para pasar al dialog
    [Parameter]
    public string OriginPage { get; set; } //parametro saber desde donde se abrio


    #region FORM DATA
    RegisterAccountForm model = new RegisterAccountForm();
    bool success;
    List<Vehicle> Listvehicles = new List<Vehicle>();

    private Dictionary<string, int> vehicleOptions = new Dictionary<string, int>();
    string sampleText = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.";


    private string[] listIssueType =
      {
        "Robo",
        "Perdida",
        "Daños",
        "Otros"
    };


    public class RegisterAccountForm
    {

        public string NumberPlate { get; set; } = null!;

        [Required]
        public string TypeIssue { get; set; } = null!;

        [StringLength(50, ErrorMessage = "Description length can't be more than 50.")]
        public string? DescriptionIssue { get; set; } = null;

    }

    private async Task OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
        await RegisterIssue();
        await Task.Delay(2000);

    }


    //method to list vehicles saved
    private async Task<IEnumerable<string>> SearchSavedVehicles(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.

        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
        {
            return vehicleOptions.Keys;// Si el valor es nulo o vacío, devuelve una lista vacía
        }

        return vehicleOptions.Keys.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    #endregion


    protected override async Task OnInitializedAsync()
    {
        Listvehicles = await LoadVehicles();
        model.NumberPlate = _NumberPlate;


    }



    #region QUERY METHODS
    //query para cargar la lista de vehiculos //usada
    private async Task<List<Vehicle>> LoadVehicles()
    {

        List<Vehicle> Listvehicles = new List<Vehicle>();

        string sql = "select * from vehicles";
        Listvehicles = await _data.LoadData<Vehicle, dynamic>(sql, new { }, _config.GetConnectionString("default"));

        foreach (var v in Listvehicles)
        {
            if (!vehicleOptions.ContainsKey(v.NumberPlate))
            {
                vehicleOptions.Add(v.NumberPlate, v.id);
            }
            else
            {
                continue;
            }
        }

        return Listvehicles;
    }

    //query busca los vehiculos mediante la placa //usada
    public async Task<List<Vehicle>> SearchVehicleByNumber(string _NumberPlate)
    {
        string sql = "SELECT * FROM vehicles WHERE NumberPlate = @NumberPlate;";
        return await _data.LoadData<Vehicle, dynamic>(sql, new { NumberPlate = @_NumberPlate }, _config.GetConnectionString("default"));
    }



    #endregion

    private async Task RegisterIssue()
    {
        List<Vehicle> searchVeh = await SearchVehicleByNumber(model.NumberPlate);
        Vehicle? foundVeh = searchVeh.FirstOrDefault(obj => obj.NumberPlate == model.NumberPlate);


        string? clientName = (await authenticationState).User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.GroupSid)?.Value;//estado de autentificacion
        string userId = (await authenticationState).User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

        Client client = await clientService.GetClientIdByName(clientName);

        Issue newIssue = new Issue
            {
                Issue_Type = model.TypeIssue,
                Description = model.DescriptionIssue,
                vehicle_Id = vehicleOptions[model.NumberPlate],
                client_id = client.id,
                employee_id = int.Parse(userId)
                
            };

        if (searchVeh.Count != 0 || foundVeh != null)
        {
            bool createSuccess = await issueService.CreateIssue(newIssue);

            //await HandleNewEvent($"Se agrego un nuevo Issue al vehiculo: {model.NumberPlate}"); //envia el evento a la linea de tiempo
         
            Snackbar.Add(createSuccess ? "Issue Agregado Correctamente" : "Error al agregar el issue", createSuccess? Severity.Success : Severity.Error);


        }

        else
        {
            Snackbar.Add("No se encontro el vehiculo", Severity.Error);
            success = false;
            return;

        }

        StateHasChanged(); //recarga los datos en la tabla
        MudDialog.Close();
        MudDialog.CancelAll();
    }

    private async Task HandleNewEvent(string msg)
    {
        Snackbar.Add("New Event", Severity.Success);

        await Task.Delay(2000);

        EventService.NotifyEvent(msg);
    }

    private void ReloadPage()
    {
        NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
    }

}
